const partchScale7 = [30,30.375,31.5,32,33.33333,33.75,34.28571,35,35.55556,36,37.5,38.57143,39.375,40,40.5,42,42.85714,44.44444,45,46.66667,47.14286,48,50,50.625,51.42857,52.5,53.33333,54,56.25,57.14286,59.25926,60,60.75,63,64,66.66667,67.5,68.57143,70,71.11111,72,75,77.14286,78.75,80,81,84,85.71429,88.88889,90,93.33333,94.28571,96,100,101.25,102.8571,105,106.6667,108,112.5,114.2857,118.5185,120,121.5,126,128,133.3333,135,137.1429,140,142.2222,144,150,154.2857,157.5,160,162,168,171.4286,177.7778,180,186.6667,188.5714,192,200,202.5,205.7143,210,213.3333,216,225,228.5714,237.037,240,243,252,256,266.6667,270,274.2857,280,284.4444,288,300,308.5714,315,320,324,336,342.8571,355.5556,360,373.3333,377.1429,384,400,405,411.4286,420,426.6667,432,450,457.1429,474.0741,480,486,504,512,533.3333,540,548.5714,560,568.8889,576,600,617.1429,630,640,648,672,685.7143,711.1111,720,746.6667,754.2857,768,800,810,822.8571,840,853.3333,864,900,914.2857,948.1481,960,972,1008,1024,1066.667,1080,1097.143,1120,1137.778,1152,1200,1234.286,1260,1280,1296,1344,1371.429,1422.222,1440,1493.333,1508.571,1536,1600,1620,1645.714,1680,1706.667,1728,1800,1828.571,1896.296,1920,1944,2016,2048,2133.333,2160,2194.286,2240,2275.556,2304,2400,2468.571,2520,2560,2592,2688,2742.857,2844.444,2880,2986.667,3017.143,3072,3200,3240,3291.429,3360,3413.333,3456,3600,3657.143,3792.593,3840,3888,4032,4096,4266.667,4320,4388.571,4480,4551.111,4608,4800,4937.143,5040,5120,5184,5376,5485.714,5688.889,5760,5973.333,6034.286,6144,6400,6480,6582.857,6720,6826.667,6912,7200,7314.286,7585.185,7680,7776,8064,8192,8533.333,8640,8777.143,8960,9102.222,9216,9600,9874.286,10080,10240,10368,10752,10971.43,11377.78,11520,11946.67,12068.57,12288,12800,12960,13165.71,13440,13653.33,13824,14400,14628.57,15170.37,15360,15552,16128,16384,17066.67,17280,17554.29,17920,18204.44];

function chromatic(min=30,max=20000,div=12){
  var n_octaves = Math.log2(max/min);
  var n_freqs = Math.ceil(n_octaves * div)+1;
  var scale = [min];
  for(let i=1; i<n_freqs; i++){
    scale = [...scale, scale[scale.length-1] * Math.pow(2, 1/div) ];
  };
  return scale;
}

function chromaticFilter(min=30,max=20000,div=12){
    const scale = chromatic(min, max, div);
    const qs = calculateQs(scale);
    const avgs = scale.map((freq,i)=>{
        if(i == 0 || i == scale.length - 1) return freq
        return scale[i-1] + scale[i+1] / 2
    })

    return {scale, qs}
}

function bins(numBins, sr=44100) {
    const binToFreq = sr / 2 / numBins;
    var scale = new Array(numBins);
    var qs = new Array(numBins);
    for(let i = 0; i < numBins; ++i) {
        scale[i] = binToFreq * i;
        qs[i] = i;
    }
    return {scale, qs}

}

function calculateQs(scale, overlap=0){
    return scale.map((freq,freq_i)=>{
        let f0, f1, delta_f;
        if(freq_i==0){
            f0 = freq; f1 = scale[freq_i+1];
        } else if(freq_i == (scale.length-1)) {
            f1 = freq; f0 = scale[freq_i-1];
        } else {
            f0 = scale[freq_i-1];  f1 = scale[freq_i+1];
            /*if(overlap > 0){
              delta_f = Math.max(delta_f0,delta_f1) * 2 * overlap;
            }else{
              delta_f = Math.min(delta_f0,delta_f1) * 2;
            }*/
        }
        delta_f = f1 - f0;
        freq =  (f1+f0) / 2;
        return freq/delta_f
    });
}

module.exports = { partchScale7, chromatic, chromaticFilter, calculateQs, bins };
